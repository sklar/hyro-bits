{"version":3,"sources":["../../../../src/components/text/text.tsx","../../../../src/components/text/text.styles.ts","../../../../src/styles/index.ts","../../../../src/styles/animations.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport React, { ElementType, forwardRef, HTMLAttributes } from 'react';\n\nimport { text } from './text.styles';\n\nexport type TruncateOptionType = {\n  begin: number;\n  end: number;\n  limit: number;\n};\n\nfunction shorten(text: string, { begin = 0, end = 0, limit = 5 }: TruncateOptionType): JSX.Element {\n  return (\n    <>\n      {text.length - (begin + end) > limit ? (\n        <>\n          <span>{text.slice(0, text.length - end)}</span>\n          <span>{text.slice(-end)}</span>\n        </>\n      ) : (\n        <>{text}</>\n      )}\n    </>\n  );\n}\n\nexport interface TextProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Render as HTML element\n   */\n  as?: ElementType<any>;\n  /**\n   * Clamp lines\n   */\n  clamp?: number;\n  /**\n   * Content\n   */\n  content?: string;\n  /**\n   * Hyphens\n   */\n  hyphens?: 'manual' | 'auto' | 'none';\n  /**\n   * White space\n   */\n  space?: 'normal' | 'nowrap' | 'pre';\n  /**\n   * Truncate text\n   */\n  truncate?: boolean | Partial<TruncateOptionType>;\n  /**\n   * Wrap text\n   */\n  wrap?: 'normal' | 'all' | 'word';\n}\n\n/**\n * Text\n */\nexport const Text = forwardRef<HTMLDivElement, TextProps>(\n  (\n    {\n      as = 'span',\n      children,\n      clamp,\n      content,\n      hyphens = 'manual',\n      space,\n      truncate,\n      wrap = 'normal',\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    const short = truncate instanceof Object && ('begin' in truncate || 'end' in truncate);\n    const text = content && short ? shorten(content, truncate as TruncateOptionType) : children;\n    const qa = {\n      'data-qa': `text-${as}`,\n    };\n\n    return (\n      <Container\n        as={as}\n        data-clamp={clamp || null}\n        data-hyphens={hyphens}\n        data-space={space || null}\n        data-truncate={text && short ? 'smart' : truncate ? 'simple' : null}\n        data-wrap={wrap}\n        ref={ref}\n        style={{\n          ['--lines' as string]: clamp,\n          ['--chars-begin' as string]: short && truncate instanceof Object && truncate?.begin,\n          ['--chars-end' as string]: short && truncate instanceof Object && truncate?.end,\n        }}\n        {...qa}\n        {...props}\n      >\n        {text}\n      </Container>\n    );\n  }\n);\n\nconst Container = styled.span`\n  ${text};\n`;\n","import { css } from '@emotion/react';\n\nimport { clamp, truncate } from '../../styles';\n\nexport const text = css`\n  &[data-clamp] {\n    ${clamp};\n  }\n\n  &[data-hyphens='auto'] {\n    hyphens: auto;\n  }\n  &[data-hyphens='none'] {\n    hyphens: none;\n  }\n\n  &[data-space='normal'] {\n    white-space: normal;\n  }\n  &[data-space='nowrap'] {\n    white-space: nowrap;\n  }\n  &[data-space='pre'] {\n    white-space: pre;\n  }\n\n  &[data-truncate='simple'] {\n    ${truncate};\n  }\n\n  &[data-truncate='smart'] {\n    --char-size: calc(0.68 * 1em);\n    --size-begin: calc(var(--char-size) * var(--chars-begin, 0));\n    --size-end: calc(var(--char-size) * var(--chars-end, 0));\n\n    display: inline-flex;\n    max-width: 100%;\n\n    span {\n      overflow: hidden;\n      white-space: nowrap;\n\n      &:nth-of-type(1) {\n        max-width: calc(100% - var(--size-end));\n        min-width: var(--size-begin);\n        text-overflow: ellipsis;\n      }\n      &:nth-of-type(2) {\n        max-width: var(--size-end);\n      }\n    }\n  }\n\n  &[data-wrap='all'] {\n    overflow-wrap: anywhere;\n  }\n  &[data-wrap='word'] {\n    overflow-wrap: break-word;\n  }\n`;\n","import { css } from '@emotion/react';\n\nexport const clamp = css`\n  display: -webkit-box;\n  overflow: hidden;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: var(--lines, 1);\n`;\n\nexport const truncate = css`\n  display: inline-block;\n  max-width: inherit;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: inherit;\n`;\n\nexport { EASING, fadeInAnimation } from './animations';\n","import { keyframes } from '@emotion/react';\nimport { Keyframes } from '@emotion/serialize';\n\n/**\n * Easing.\n * @see http://matthewlein.com/ceaser/\n */\nexport const EASING = {\n  easeInOut: 'ease-in-out',\n  easeInOutQuart: 'cubic-bezier(0.770, 0.000, 0.175, 1.000)',\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutCubic: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)',\n};\n\n/**\n * Fade In.\n */\nexport const fadeInAnimation: Keyframes = keyframes`\n  0%    { opacity: 0; }\n  100%  { opacity: 1; }\n`;\n"],"mappings":";AAAA,OAAOA,MAAY,kBACnB,OAAOC,GAAsB,cAAAC,MAAkC,QCD/D,OAAS,OAAAC,MAAW,iBCApB,OAAS,OAAAC,MAAW,iBCApB,OAAS,aAAAC,MAAiB,iBAiBnB,IAAMC,EAA6BC;AAAA;AAAA;EDfnC,IAAMC,EAAQC;AAAA;AAAA;AAAA;AAAA;AAAA,EAORC,EAAWD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EDLjB,IAAME,EAAOC;AAAA;AAAA,MAEdC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EDhBN,SAASC,EAAQC,EAAc,CAAE,MAAAC,EAAQ,EAAG,IAAAC,EAAM,EAAG,MAAAC,EAAQ,CAAE,EAAoC,CACjG,OACEC,EAAA,cAAAA,EAAA,cACGJ,EAAK,QAAUC,EAAQC,GAAOC,EAC7BC,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC,YAAMJ,EAAK,MAAM,EAAGA,EAAK,OAASE,CAAG,CAAE,EACxCE,EAAA,cAAC,YAAMJ,EAAK,MAAM,CAACE,CAAG,CAAE,CAC1B,EAEAE,EAAA,cAAAA,EAAA,cAAGJ,CAAK,CAEZ,CAEJ,CAoCO,IAAMK,EAAOC,EAClB,CACE,CACE,GAAAC,EAAK,OACL,SAAAC,EACA,MAAAC,EACA,QAAAC,EACA,QAAAC,EAAU,SACV,MAAAC,EACA,SAAAC,EACA,KAAAC,EAAO,YACJC,CACL,EACAC,IACgB,CAChB,IAAMC,EAAQJ,aAAoB,SAAW,UAAWA,GAAY,QAASA,GACvEb,EAAOU,GAAWO,EAAQlB,EAAQW,EAASG,CAA8B,EAAIL,EAC7EU,EAAK,CACT,UAAW,QAAQX,GACrB,EAEA,OACEH,EAAA,cAACe,EAAA,CACC,GAAIZ,EACJ,aAAYE,GAAS,KACrB,eAAcE,EACd,aAAYC,GAAS,KACrB,gBAAeZ,GAAQiB,EAAQ,QAAUJ,EAAW,SAAW,KAC/D,YAAWC,EACX,IAAKE,EACL,MAAO,CACL,CAAC,WAAsBP,EACvB,CAAC,iBAA4BQ,GAASJ,aAAoB,SAAUA,GAAA,YAAAA,EAAU,OAC9E,CAAC,eAA0BI,GAASJ,aAAoB,SAAUA,GAAA,YAAAA,EAAU,IAC9E,EACC,GAAGK,EACH,GAAGH,GAEHf,CACH,CAEJ,CACF,EAEMmB,EAAYC,EAAO;AAAA,IACrBpB;","names":["styled","React","forwardRef","css","css","keyframes","fadeInAnimation","keyframes","clamp","css","truncate","text","css","clamp","truncate","shorten","text","begin","end","limit","React","Text","forwardRef","as","children","clamp","content","hyphens","space","truncate","wrap","props","ref","short","qa","Container","styled"]}