{"version":3,"sources":["../../../../src/components/grid/grid.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport React, { ElementType, forwardRef, HTMLAttributes, ReactNode } from 'react';\n\nimport { AlignmentPrimaryType, AlignmentSecondaryType } from '../../types';\n\nexport interface GridProps extends HTMLAttributes<HTMLElement> {\n  /**\n   * Alignment, secondary axis\n   */\n  align?: AlignmentPrimaryType;\n  /**\n   * Render as HTML element\n   */\n  as?: ElementType<any>;\n  /**\n   * Block or inline\n   */\n  block?: boolean;\n  /**\n   * Children\n   */\n  children: ReactNode;\n  /**\n   * Columns\n   */\n  columns?: string;\n  /**\n   * Flow\n   */\n  flow?: 'row' | 'column' | 'dense' | 'row dense' | 'column dense';\n  /**\n   * Gap\n   */\n  gap?: string;\n  /**\n   * Alignment, primary axis\n   */\n  justify?: AlignmentSecondaryType;\n  /**\n   * Column, max\n   */\n  max?: string;\n  /**\n   * Column, min\n   */\n  min?: string;\n  /**\n   * Sizing\n   */\n  sizing?: 'auto-fill' | 'auto-fit';\n}\n\n/**\n * Grid wrapper\n */\nexport const Grid = forwardRef<HTMLDivElement, GridProps>(\n  (\n    {\n      align,\n      as = 'div',\n      block,\n      columns,\n      flow,\n      gap,\n      justify,\n      max = '1fr',\n      min = '0px',\n      sizing = 'auto-fit',\n      ...props\n    },\n    ref\n  ): JSX.Element => {\n    const delegated = { align, block, columns, gap, justify, max, min, sizing, ...props };\n    return <Container as={as} ref={ref} {...delegated} />;\n  }\n);\n\nconst Container = styled.div<GridProps>(\n  css`\n    & > * {\n      min-width: 0;\n    }\n  `,\n  ({ align, block, columns, flow, gap, justify, max, min, sizing }) => ({\n    alignItems: align,\n    display: `${block ? 'grid' : 'inline-grid'}`,\n    gap: gap,\n    gridAutoFlow: flow,\n    gridTemplateColumns: `${\n      columns ? columns : `repeat(${sizing}, minmax(min(100%, ${min}), ${max}))`\n    }`,\n    justifyItems: justify,\n  })\n);\n"],"mappings":";AAAA,OAAS,OAAAA,MAAW,iBACpB,OAAOC,MAAY,kBACnB,OAAOC,GAAsB,cAAAC,MAA6C,QAsDnE,IAAMC,EAAOD,EAClB,CACE,CACE,MAAAE,EACA,GAAAC,EAAK,MACL,MAAAC,EACA,QAAAC,EACA,KAAAC,EACA,IAAAC,EACA,QAAAC,EACA,IAAAC,EAAM,MACN,IAAAC,EAAM,MACN,OAAAC,EAAS,cACNC,CACL,EACAC,IACgB,CAChB,IAAMC,EAAY,CAAE,MAAAZ,EAAO,MAAAE,EAAO,QAAAC,EAAS,IAAAE,EAAK,QAAAC,EAAS,IAAAC,EAAK,IAAAC,EAAK,OAAAC,EAAQ,GAAGC,CAAM,EACpF,OAAOb,EAAA,cAACgB,EAAA,CAAU,GAAIZ,EAAI,IAAKU,EAAM,GAAGC,EAAW,CACrD,CACF,EAEMC,EAAYjB,EAAO,IACvBD;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,CAAE,MAAAK,EAAO,MAAAE,EAAO,QAAAC,EAAS,KAAAC,EAAM,IAAAC,EAAK,QAAAC,EAAS,IAAAC,EAAK,IAAAC,EAAK,OAAAC,CAAO,KAAO,CACpE,WAAYT,EACZ,QAAS,GAAGE,EAAQ,OAAS,gBAC7B,IAAKG,EACL,aAAcD,EACd,oBAAqB,GACnBD,GAAoB,UAAUM,uBAA4BD,OAASD,QAErE,aAAcD,CAChB,EACF","names":["css","styled","React","forwardRef","Grid","align","as","block","columns","flow","gap","justify","max","min","sizing","props","ref","delegated","Container"]}